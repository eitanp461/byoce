{"version":3,"sources":["communication.js","Header/Header.js","Body/SingleLineGridList/tileData.js","Body/SingleLineGridList/SingleLineGridList.js","Body/Preview/Preview.js","Body/Slider/Slider.js","Body/Body.js","App.js","serviceWorker.js","index.js"],"names":["communicationContext","createContext","send","initializeCommunication","messageHandler","target","window","addEventListener","data","console","log","type","domain","parent","postMessage","JSON","stringify","Header","react_default","a","createElement","AppBar","position","color","Toolbar","Typography","variant","img","title","author","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","primary","light","titleBar","SingleLineGridList","classes","className","GridList","cols","spacing","tileData","map","tile","GridListTile","key","src","alt","GridListTileBar","actionIcon","IconButton","StarBorder_default","fullWidth","width","Preview","_ref","startOffset","endOffset","lib","cloudName","publicId","controls","SimpleSlider","state","value","handleChange","event","_this","setState","this","props","id","Slider","slider","aria-labelledby","onChange","React","Component","withStyles","padding","maxHeight","fullHeight","height","flex","Body","Grid","container","wrap","direction","alignItems","Box","border","alignSelf","Slider_Slider","SingleLineGridList_SingleLineGridList","flexGrow","App","initComm","Provider","item","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84344c93.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const communicationContext = createContext({ send: null });\n\nconst initializeCommunication = messageHandler => {\n    let target;\n\n    const handleMessages = data => {\n        console.log('handling message from host ', data);\n        if (data.type === '__hello') {\n            console.log('recieved target from host: ', data.domain);\n            target = data.domain;\n        } else {\n            console.log('delegating to messageHandler');\n            messageHandler(data);\n        }\n    };\n\n    window.addEventListener('message', handleMessages, false);\n\n    const send = data => {\n        if (target) {\n            console.log('sending message to parent: ', data);\n            window.parent.postMessage(JSON.stringify({ data }), target);\n        } else {\n            console.log('target is not defined yet');\n        }\n    };\n\n    return {\n        send,\n    };\n};\n\nexport default initializeCommunication;\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nexport default () => (\n    <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n                Cloudinary Video Producer\n            </Typography>\n        </Toolbar>\n    </AppBar>\n)\n","const data = [\n    {\n        img: 'https://eitanpeer-res.cloudinary.com/sample',\n        title: 'Image1',\n        author: 'author11',\n    },\n    {\n        img: 'https://eitanpeer-res.cloudinary.com/abcdeee',\n        title: 'Image2',\n        author: 'author22',\n    },\n    {\n        img: 'https://eitanpeer-res.cloudinary.com/rhpim0vkntffyvw6ltaf',\n        title: 'Image3',\n        author: 'author33',\n    },\n];\n\nexport default data;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport tileData from './tileData';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        flexWrap: 'nowrap',\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n        transform: 'translateZ(0)',\n    },\n    title: {\n        color: theme.palette.primary.light,\n    },\n    titleBar: {\n        background:\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n}));\n\nfunction SingleLineGridList() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <GridList className={classes.gridList} cols={2.5} spacing={3}>\n                {tileData.map(tile => (\n                    <GridListTile key={tile.img}>\n                        <img src={tile.img} alt={tile.title} />\n                        <GridListTileBar\n                            title={tile.title}\n                            classes={{\n                                root: classes.titleBar,\n                                title: classes.title,\n                            }}\n                            actionIcon={\n                                <IconButton>\n                                    <StarBorderIcon className={classes.title} />\n                                </IconButton>\n                            }\n                        />\n                    </GridListTile>\n                ))}\n            </GridList>\n        </div>\n    );\n}\n\nexport default SingleLineGridList;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport { Video, Transformation, CloudinaryContext } from 'cloudinary-react';\n\nconst useStyles = makeStyles({\n    fullWidth: {\n        width: '100%',\n    },\n});\n\nexport default ({ startOffset, endOffset }) => {\n    const classes = useStyles();\n    return (\n        <CloudinaryContext cloudName=\"demo\">\n            <div>\n                <Video publicId=\"dog\" controls className={classes.fullWidth} />\n            </div>\n        </CloudinaryContext>\n    );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/lab/Slider';\n\nconst styles = {\n  root: {\n    width: 300,\n  },\n  slider: {\n    padding: '22px 0px',\n  },\n};\n\nclass SimpleSlider extends React.Component {\n  state = {\n    value: 50,\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Typography id=\"label\">Slider label</Typography>\n        <Slider\n          className={classes.slider}\n          value={value}\n          aria-labelledby=\"label\"\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nSimpleSlider.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleSlider);\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport SingleLineGridList from './SingleLineGridList/SingleLineGridList.js';\nimport Preview from './Preview/Preview';\nimport Slider from './Slider/Slider';\n\nconst useStyles = makeStyles({\n    maxHeight: {\n        maxHeight: '100%',\n    },\n    fullHeight: {\n        height: '100%',\n    },\n    flex: {\n        flex: 1,\n    },\n});\n\nexport default () => {\n    const classes = useStyles();\n    return (\n        <Grid\n            container\n            wrap=\"nowrap\"\n            direction=\"column\"\n            className={classes.fullHeight}\n        >\n            <Grid container alignItems=\"center\" className={classes.fullHeight}>\n                <Box flex={1} border={1} alignSelf=\"stretch\">\n                    <Slider />\n                </Box>\n                <Box flex={1} border={1} >\n                    <Preview className={classes.maxHeight}/>\n                </Box>\n            </Grid>\n            {/* <Preview className={classes.maxHeight}/> */}\n            <SingleLineGridList />\n        </Grid>\n    );\n};\n","import React, { useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/styles';\nimport initComm, { communicationContext } from './communication';\nimport Header from './Header/Header.js';\nimport Body from './Body/Body.js';\nimport './App.css';\n\nconst useStyles = makeStyles({\n    fullHeight: {\n        height: '100%',\n    },\n    flexGrow: {\n        flex: 1,\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n    const { send } = initComm(() => console.log('XXXXXXXXXXXXXXXX'));\n\n    return (\n        <Box height=\"100%\">\n            <communicationContext.Provider value={{ send }}>\n                <Grid\n                    wrap=\"nowrap\"\n                    direction=\"column\"\n                    container\n                    className={(classes.flexGrow, classes.fullHeight)}\n                >\n                    <Grid item>\n                        <Header />\n                    </Grid>\n\n                    <Grid item className={classes.flexGrow}>\n                        <Body />\n                    </Grid>\n                </Grid>\n            </communicationContext.Provider>\n        </Box>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}