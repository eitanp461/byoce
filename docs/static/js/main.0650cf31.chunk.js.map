{"version":3,"sources":["communication.js","Header/Header.js","state.js","Body/SingleLineGridList/tileData.js","Body/SingleLineGridList/SingleLineGridList.js","Body/Slider/Slider.js","Body/Preview/Preview.js","Body/Cropper/Cropper.js","Body/Body.js","App.js","serviceWorker.js","index.js"],"names":["communicationContext","createContext","send","initializeCommunication","messageHandler","target","window","addEventListener","data","console","log","type","domain","parent","postMessage","JSON","stringify","Header","react_default","a","createElement","AppBar","position","color","Consumer","value","Toolbar","Typography","variant","onClick","StateContext","StateProvider","_ref","reducer","initialState","children","Provider","useReducer","img","title","author","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","primary","light","titleBar","SingleLineGridList","activeHandle","classes","className","GridList","cols","spacing","tileData","map","tile","GridListTile","key","src","alt","GridListTileBar","actionIcon","IconButton","StarBorder_default","fullWidth","width","Preview","startOffset","endOffset","_useContext","useContext","_useContext2","Object","slicedToArray","_useContext2$","cloudName","publicId","lib","controls","minValue","maxValue","createImgUrl","pct","concat","getActiveOffset","min","max","firstChild","id","onChange","debounce","getActiveImageUrl","eventHandler","e","RangeSlider","props","_useState","useState","_useState2","range","setRange","dispatch","useEffect","sliderHandles","toConsumableArray","document","getElementsByClassName","forEach","handle","index","hasChildNodes","style","cssText","appendChild","removeEventListener","padding","marginTop","js_default","Math","onChangeComplete","offset","maxHeight","fullHeight","height","maxWidth","flex","imageWrapper","Cropper","cropHandlePreviewOffset","Grid","container","wrap","direction","Slider_Slider","Body","state_StateProvider","state","action","objectSpread","alignItems","Box","border","SingleLineGridList_SingleLineGridList","flexGrow","App","initComm","item","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0650cf31.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const communicationContext = createContext({ send: null });\n\nconst initializeCommunication = messageHandler => {\n    let target;\n\n    const handleMessages = data => {\n        console.log('handling message from host ', data);\n        if (data.type === '__hello') {\n            console.log('recieved target from host: ', data.domain);\n            target = data.domain;\n        } else {\n            console.log('delegating to messageHandler');\n            messageHandler(data);\n        }\n    };\n\n    window.addEventListener('message', handleMessages, false);\n\n    const send = data => {\n        if (target) {\n            console.log('sending message to parent: ', data);\n            window.parent.postMessage(JSON.stringify({ data }), target);\n        } else {\n            console.log('target is not defined yet');\n        }\n    };\n\n    return {\n        send,\n    };\n};\n\nexport default initializeCommunication;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { communicationContext } from '../communication';\n\nexport default () => {\n    return (\n        <AppBar position=\"static\" color=\"default\">\n            <communicationContext.Consumer>\n                {value => (\n                    <Toolbar>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            Cloudinary Video Producer\n                        </Typography>\n                        <button onClick={() => value.send({ type: 'done' })} />\n                    </Toolbar>\n                )}\n            </communicationContext.Consumer>\n        </AppBar>\n    );\n};\n","import React, { createContext, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nStateProvider.propTypes = {\n  /**\n   * @return {React.Node}\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Object containing initial state value.\n   */\n  initialState: PropTypes.shape({}).isRequired,\n\n  /**\n   *\n   * @param {object} state\n   * @param {object} action\n   */\n  reducer: PropTypes.func.isRequired\n};\n","const data = [\n    {\n        img: 'https://eitanpeer-res.cloudinary.com/sample',\n        title: 'Image1',\n        author: 'author11',\n    },\n    {\n        img: 'https://eitanpeer-res.cloudinary.com/abcdeee',\n        title: 'Image2',\n        author: 'author22',\n    },\n    {\n        img: 'https://eitanpeer-res.cloudinary.com/rhpim0vkntffyvw6ltaf',\n        title: 'Image3',\n        author: 'author33',\n    },\n];\n\nexport default data;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport tileData from './tileData';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        flexWrap: 'nowrap',\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n        transform: 'translateZ(0)',\n    },\n    title: {\n        color: theme.palette.primary.light,\n    },\n    titleBar: {\n        background:\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n}));\n\nfunction SingleLineGridList() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <GridList className={classes.gridList} cols={2.5} spacing={3}>\n                {tileData.map(tile => (\n                    <GridListTile key={tile.img}>\n                        <img src={tile.img} alt={tile.title} />\n                        <GridListTileBar\n                            title={tile.title}\n                            classes={{\n                                root: classes.titleBar,\n                                title: classes.title,\n                            }}\n                            actionIcon={\n                                <IconButton>\n                                    <StarBorderIcon className={classes.title} />\n                                </IconButton>\n                            }\n                        />\n                    </GridListTile>\n                ))}\n            </GridList>\n        </div>\n    );\n}\n\nexport default SingleLineGridList;\n","import React, { useState, useEffect, useContext } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport ReactInputRange from 'react-input-range';\nimport debounce from 'lodash.debounce';\nimport { StateContext } from '../../state';\nimport 'react-input-range/lib/css/index.css';\nimport './Slider.css';\n\nconst classes = {\n    root: {\n        width: 300,\n    },\n    slider: {\n        padding: '22px 0px',\n    },\n    displayNone: {\n        display: 'none',\n    },\n};\n\nconst classNames = {\n    // disabledInputRange: cx(styles.disabledInputRange, 'input-range input-range--disabled'),\n    // track: cx(styles.track, 'input-range__track input-range__track--background'),\n    // activeTrack: cx(styles.activeTrack, 'input-range__track input-range__track--active'),\n    // slider: cx(styles.slider, 'input-range__slider'),\n    // valueLabel: cx(\n    //     classes.displayNone,\n    //     'input-range__label input-range__label--value'\n    // ),\n    // labelContainer: cx(styles.labelContainer, 'input-range__label-container'),\n    // maxLabel: cx(styles.maxLabel, 'input-range__label input-range__label--max', { dn: !props.showMinMaxLabels }),\n    // minLabel: cx('input-range__label input-range__label--min', {\n    //     dn: !props.showMinMaxLabels,\n    // }),\n    // inputRange: 'input-range',\n    // sliderContainer: 'input-range__slider-container',\n};\n\nconst minValue = 0;\nconst maxValue = 100;\n\nlet activeHandle;\n\nconst createImgUrl = pct =>\n    `https://res.cloudinary.com/demo/video/upload/w_50,so_${pct}p/dog.jpg`;\n\nconst getActiveOffset = (min, max) => {\n    const img = activeHandle.firstChild;\n    const isMin = img.id === 'slider-thumb-0';\n    return isMin ? min : max;\n};\n\nconst getActiveImageUrl = (min, max) => {\n    const pct = getActiveOffset(min, max);\n    return createImgUrl(pct);\n};\n\nconst onChange = debounce((min, max) => {\n    const img = activeHandle.firstChild;\n    img.src = getActiveImageUrl(min, max);\n}, 150);\n\nconst eventHandler = e => {\n    activeHandle = e.target;\n};\n\nfunction RangeSlider(props) {\n    const [range, setRange] = useState({ min: minValue, max: maxValue });\n    const [{ cloudName, publicId }, dispatch] = useContext(StateContext);\n\n    useEffect(() => {\n        // Use DOM APIs to bind to slider events and add elements to them\n        // Since it is not supported by the input-range component\n        const sliderHandles = [\n            ...document.getElementsByClassName('input-range__slider'),\n        ];\n        sliderHandles.forEach((handle, index) => {\n            // Append a child to the event target if it doesn't have children\n            if (!handle.hasChildNodes()) {\n                const img = document.createElement('img');\n                img.id = `slider-thumb-${index}`;\n                // Offset in %\n                img.src = createImgUrl(index * 100);\n                img.style.cssText =\n                    'position: absolute; top: -30px; left: -100%';\n                handle.appendChild(img);\n            }\n\n            // Add event handler to denote the active slider\n            handle.addEventListener('mousedown', eventHandler);\n        });\n        return function cleanup() {\n            sliderHandles.forEach(handle => {\n                handle.removeEventListener('mousedown', eventHandler);\n            });\n        };\n    });\n\n    return (\n        <div style={{ padding: '25px 0', marginTop: '4px' }}>\n            <ReactInputRange\n                maxValue={maxValue}\n                minValue={minValue}\n                value={{ min: range.min, max: range.max }}\n                onChange={value => {\n                    const min = Math.max(value.min, minValue);\n                    const max = Math.min(value.max, maxValue);\n                    // Update slider position\n                    setRange({ min, max });\n                    onChange(min, max);\n                }}\n                onChangeComplete={value => {\n                    const min = Math.max(value.min, minValue);\n                    const max = Math.min(value.max, maxValue);\n                    // Update previewed image\n                    dispatch({\n                        type: 'changeCropPreviewOffset',\n                        offset: getActiveOffset(),\n                    });\n                }}\n            />\n        </div>\n    );\n}\n\nexport default RangeSlider;\n","import React, { useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport { Video, Transformation, CloudinaryContext } from 'cloudinary-react';\nimport { StateContext } from '../../state';\n\nconst useStyles = makeStyles({\n    fullWidth: {\n        width: '100%',\n    },\n});\n\nexport default ({ startOffset, endOffset }) => {\n    const [{ cloudName, publicId }, dispatch] = useContext(StateContext)\n\n    const classes = useStyles();\n    return (\n        <CloudinaryContext cloudName={cloudName}>\n            <Video publicId={publicId} controls className={classes.fullWidth} />\n        </CloudinaryContext>\n    );\n};\n","import React, { useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport { Image, Transformation, CloudinaryContext } from 'cloudinary-react';\nimport Slider from '../Slider/Slider';\nimport { StateContext } from '../../state';\n\nconst useStyles = makeStyles({\n    maxHeight: {\n        maxHeight: '100%',\n    },\n    fullHeight: {\n        height: '100%',\n    },\n    maxWidth: {\n        maxWidth: '100%',\n    },\n    flex: {\n        flex: 1,\n    },\n    imageWrapper: {\n        padding: '10px',\n    },\n});\n\nexport default () => {\n    const [{ cloudName, publicId, cropHandlePreviewOffset }, dispatch] = useContext(StateContext)\n\n    const classes = useStyles();\n    return (\n        <Grid\n            container\n            wrap=\"nowrap\"\n            direction=\"column\"\n            className={(classes.fullHeight, classes.imageWrapper)}\n        >\n            <CloudinaryContext\n                cloudName={cloudName}\n                className={classes.imageWrapper}\n            >\n                <Image publicId={publicId} className={classes.maxWidth}>\n                    <Transformation startOffset={cropHandlePreviewOffset}></Transformation>\n                    </Image>\n            </CloudinaryContext>\n            <Slider />\n        </Grid>\n    );\n};\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport { StateProvider } from '../state';\nimport SingleLineGridList from './SingleLineGridList/SingleLineGridList.js';\nimport Preview from './Preview/Preview';\nimport Cropper from './Cropper/Cropper';\n\nconst useStyles = makeStyles({\n    maxHeight: {\n        maxHeight: '100%',\n    },\n    fullHeight: {\n        height: '100%',\n    },\n    flex: {\n        flex: 1,\n    },\n});\n\nexport default props => {\n    const initialState = {\n        cloudName: 'demo',\n        publicId: 'dog',\n        cropHandlePreviewOffset: 0,\n    };\n\n    const reducer = (state, action) => {\n        switch (action.type) {\n            case 'changeCropPreviewOffset':\n                return {\n                    ...state,\n                    cropHandlePreviewOffset: action.offset,\n                };\n\n            default:\n                return state;\n        }\n    };\n\n    const classes = useStyles();\n    return (\n        <StateProvider initialState={initialState} reducer={reducer}>\n            <Grid\n                container\n                wrap=\"nowrap\"\n                direction=\"column\"\n                className={classes.fullHeight}\n            >\n                <Grid\n                    container\n                    alignItems=\"center\"\n                    className={classes.fullHeight}\n                >\n                    <Box flex={1} border={1}>\n                        <Cropper />\n                    </Box>\n                    <Box flex={1} border={1}>\n                        <Preview className={classes.maxHeight} />\n                    </Box>\n                </Grid>\n                <SingleLineGridList />\n            </Grid>\n        </StateProvider>\n    );\n};\n","import React, { useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/styles';\nimport initComm, { communicationContext } from './communication';\nimport Header from './Header/Header.js';\nimport Body from './Body/Body.js';\nimport './App.css';\n\nconst useStyles = makeStyles({\n    fullHeight: {\n        height: '100%',\n    },\n    flexGrow: {\n        flex: 1,\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n    const { send } = initComm(data => {\n        console.log('XXXXXXXXXXXXXXXX', data);\n    });\n\n    return (\n        <Box height=\"100%\">\n            <communicationContext.Provider value={{ send }}>\n                <Grid\n                    wrap=\"nowrap\"\n                    direction=\"column\"\n                    container\n                    className={(classes.flexGrow, classes.fullHeight)}\n                >\n                    <Grid item>\n                        <Header />\n                    </Grid>\n\n                    <Grid item className={classes.flexGrow}>\n                        <Body />\n                    </Grid>\n                </Grid>\n            </communicationContext.Provider>\n        </Box>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}